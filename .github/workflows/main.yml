# This is a basic workflow to help you get started with Actions

name: SOC_SIGMA_AUTOMATION

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]      

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "test"
  test:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v1

      # - name: Checkout
      #   uses: actions/checkout@v2
      #   with:
      #     repository: zainimran/pySigma
      #     path: './pysigma'
      
      - name: setup python 3.8
        uses: actions/setup-python@v1
        with: 
          python-version: 3.8
      
      - name: install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests
          pip install pyyaml
          sudo apt-get install jq
          
      - id: get-new-files
        uses: jitterbit/get-changed-files@v1

      - name: get CS auth token
        run: |
          curl -X POST "https://api.us-2.crowdstrike.com/oauth2/token" -H  "accept: application/json" -H  "Content-Type: application/x-www-form-urlencoded" -d "client_id=${{ secrets.CS_CLIENT_ID }}&client_secret=${{ secrets.CS_CLIENT_SECRET }}" > cs_auth_token.json
          auth_token=$(jq '.access_token' cs_auth_token.json) 

      - name: run conversion and push rule to CS
        run: |
          echo ${auth_token}
          for changed_file in ${{ steps.get-new-files.outputs.added_modified }}
          do
            if echo ${changed_file} | grep -q "rules"
            then
              python script.py ${changed_file} ${auth_token}
            fi
          done

      # - name: Commit files
      #   id: commit
      #   run: |
      #     git config --local user.email "zainimran@outlook.com"
      #     git config --local user.name "Zain Imran"
      #     git add .
      #     if [ -z $(git status --porcelain) ]; then
      #       echo "::set-output name=push::false"
      #     else
      #       git commit -m "Committing converted rule"
      #       echo "::set-output name=push::true"
      #     fi

      # - name: Push changes
      #   if: steps.commit.outputs.push == 'true'
      #   uses: ad-m/github-push-action@master
      #   with:
      #     github_token: ${{ secrets.GITHUB_TOKEN }}
